---
#ConfigMap用于保存小量非加密数据
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-cm
data:
  my.cnf: |
    [mysqld]
    user=mysql
    log_error = /var/www/logs/error.log #默认stderr,即输出到终端; 如使用k3d部署,mysql无法找到除"/var/lib/mysql"和"/etc/mysql/"以外的路径,猜测是rancher/k3s镜像出了问题

    # 配置mysql内存,内存不足可以适当减少(建议主机配置swap虚拟内存)
    innodb_buffer_pool_size = 256M
    # 检测死锁
    innodb_deadlock_detect = on
    #不区分大小写
    lower_case_table_names = 0
    #最大连接数,默认151
    max_connections = 151
    #解决mycat无法连接
    max_connect_errors=1000
    #或使用命令"set names utf8mb4"
    character-set-server=utf8mb4
    collation-server = utf8mb4_unicode_ci

    # mysql8使用了caching_sha2_password,php版本不兼容,改为mysql_native_password
    # 同时还有执行:
    # ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'my_password';
    # ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'my_password';
    authentication_policy = mysql_native_password

    # 解决报错: "this is incompatible with sql_mode=only_full_group_by"
    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION

    binlog_format= ROW
    binlog_row_image=FULL
    log-bin = mysql-bin
    server-id = 1
    max_allowed_packet=1024M
    lc-messages-dir = /usr/share/mysql-8.0/english/


    [client]
    default-character-set = utf8mb4

    [mysql]
    default-character-set = utf8mb4



---
apiVersion: apps/v1
kind: StatefulSet #专门管理有状态服务(如mysql), 区别于"Deployment"
metadata:
  name: mysql-sts #元数据名称
spec:
  serviceName: mysql-svc #!!!关键
  replicas: 1 # #副本数;默认1,多个可负载均衡
  minReadySeconds: 5 #等待容器[minReadySeconds]秒后再确定是否可提供服务;默认0
  updateStrategy: #StatefulSet更新策略
    type: RollingUpdate
  selector: #控制器, 管理指定app标签的template
    matchLabels:
      app: mysql-container #匹配spec.template.metadata.labels
  volumeClaimTemplates: #会自动创建pvc和pv并关联指定存储类(StorageClass);与直接使用持久卷声明(PersistentVolumeClaim)不同,volumeClaimTemplates会为每个副本生成pvc而非共用
    - metadata:
        name: mysql-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: local-path #"local-path": k3s自动创建的存储类
        resources:
          requests:
            storage: 5Gi
  template: #创建Pod模板
    metadata:
      labels:
        app: mysql-container
      annotations:
        changeRollingUpdate: ${K8S_MYSQL} #此值一旦有变化(k8s无法获取系统变量,这里通过脚本或手工更改), apply此yaml就会重新部署(滚动更新)
    spec:
      nodeSelector:
        mysql-db: "true" #在特定label的节点上启动
      tolerations:
        - key: "" #key为空,设置容忍所有污点, 防止节点被设置污点
          operator: "Exists" #Equal(默认):key=value相同,需要设置value;"Exists":存在相同key值就符合
      restartPolicy: Always
      priorityClassName: system-cluster-critical #绑定PriorityClass,用于设置pod优先级(重要性)
      terminationGracePeriodSeconds: 10 #给即将被强制清除的pod的缓冲时间
      volumes:
        - name: cm
          configMap:
            name: mysql-cm
            defaultMode: 0644 #mysql可能对文件有写操作,同时权限太高会被mysql有意忽略
        - name: log
          persistentVolumeClaim:
            claimName: log
      containers:
        - name: mysql-container
          image: mysql:8.0-debian #设置latest使得k8s难以追踪和回滚镜像; mysql默认版本会出现无法读取配置文件的问题
          imagePullPolicy: IfNotPresent #镜像拉取策略;Always:始终从远程拉取;Never:始终本地;IfNotPresent:本地不存在镜像才拉取
          securityContext:
            privileged: false #权限控制
          ports:
            - name: cp
              containerPort: 3306
              # hostPort: 3306 #把容器端口containerPort映射到宿主机hostPort端口上,类似"port-forward", 后者的优先级小;注意docker和k8s是跳过ufw直接设置iptables的, 一旦映射则直接暴露端口
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: global
                  key: timezone
            - name: UUID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid #查看对应关系:kubectl get pods -A -o custom-columns=node:.spec.nodeName,pod:.metadata.name,uid:.metadata.uid
            - name: MYSQL_ROOT_PASSWORD
              # value: "root"
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-pwd
          volumeMounts:
            - name: cm
              mountPath: /etc/mysql/conf.d/
              # subPath: my.cnf #subPath挂载单个文件(缺点: configMap更新后, 挂载的文件不会更新)
            - name: log
              mountPath: /var/www/logs/
              subPathExpr: mysql-$(UUID) #使用卷下的目录,没有则创建
            - name: mysql-data
              mountPath: /var/lib/mysql
          # lifecycle:
          #   postStart: #容器开始启动的钩子事件;与正常容器异步进行,且俩不分顺序
          livenessProbe: #存活性探针;如不通过则pod重启(根据restartPolicy)
            initialDelaySeconds: 30 #容器启动30秒后才开始探测;时间长点,避免重启
            periodSeconds: 10 #重试的间隔时间
            timeoutSeconds: 3 #连接超时
            exec:
              command: ["mysqladmin", "ping", "-h127.0.0.1"]
          readinessProbe: #就绪性探针;如不通过则pod被service暂时忽略(READY值为"0/1"),等待pod变为Ready状态
            initialDelaySeconds: 5 #这不需太久, 因为容器本来就待running状态
            periodSeconds: 2
            timeoutSeconds: 1
            exec:
              command:
                  - /bin/sh
                  - -c
                  - mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"
          resources:
            requests:
              memory: 128Mi
              cpu: 200m
            limits:
              memory: 512Mi
              cpu: 1

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
spec:
  selector:
    app: mysql-container
  # type: ClusterIP #ClusterIP(默认)/NodePort/LoadBalancer(这个模式与k8s不同, k3s不依赖云服务,而在每个node上部署一个svclb的pod做流量转发)
  clusterIP: None #无头服务(Headless Service),让每个pod都有了特定地址(podName.svcName(可在pod内查看hosts))从而可直接访问(相对的,正常service会随机选pod实现负载均衡,没有特定访问地址);如:"mysql读写分离"需对单个pod进行"写"操作,因此就需要特定地址
  sessionAffinity: ClientIP #会话保持,奇怪不生效
  ports:
    - name: sp
      port: 3306 #对外端口
      targetPort: cp
      # notePort: 30001 #type=NodePort生效;不指定则随机
